//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public class PID
{
	private float Kp, Ki, Kd;
	private float SteadyError = 0;
	//private float MaxSteadyError =10;
	//private float MinSteadyError =1;
	private float PrevError = 0;
	public PID (float Kp, float Ki, float Kd)
	{
		this.Kp = Kp;
		this.Ki = Ki;
		this.Kd = Kd;
	}

	public void reset () {
		SteadyError = 0;
		PrevError = 0;
	}

	public Vector3 regulation (Vector3 origin, Vector3 destination){
		Vector3 direction = (destination - origin).normalized;
		float error = Vector3.Distance (origin, destination);
		SteadyError += error;

		//if ( SteadyError > MaxSteadyError ) SteadyError = MaxSteadyError;
		//if ( SteadyError < MinSteadyError ) SteadyError = MinSteadyError;

		float proportional = Kp * error;
		float integral = Ki * SteadyError ;
		float derivative = Kd * (error - PrevError) ;

		float Regulation = proportional + integral + derivative;


		PrevError = error;

		//Debug.Log ("Steady Error " + SteadyError);
		return direction*Regulation;
	}
	public Vector3 regulation (Vector3 direction){
		float error = direction.magnitude;
		SteadyError += error;

		float proportional = Kp * error;
		float integral = Ki * SteadyError ;
		float derivative = Kd * (error - PrevError) ;
		
		float Regulation = proportional + integral + derivative;
		
		PrevError = error;
		
		Debug.Log ("Steady Error " + SteadyError + " previousError " + PrevError);
		return direction.normalized*Regulation;
	}
		
}


